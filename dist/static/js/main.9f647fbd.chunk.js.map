{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/donate.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","react_default","a","createElement","Component","About","Contact","Donate","Main","Switch","Route","exact","path","component","LandingPage","AboutMe","App","className","lib","title","scroll","Link","to","main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAUeA,mLANX,OACEC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,mCAHWC,aCQPC,mLANX,OACEJ,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,iCAHQC,aCSLE,mLAPX,OACEL,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,2BACNF,EAAAC,EAAAC,cAAA,2BAJgBC,aCQPG,mLANX,OACEN,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,kCAHSC,aCeNI,EATF,kBACXP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCb,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWE,IAClCd,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWP,IAClCL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,eCuBtBS,mLA5BX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBACfhB,EAAAC,EAAAC,cAACe,EAAA,OAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,0BAA0BC,QAAM,GAC1CnB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACIjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,SACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,YAGRrB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,QACVlB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACIjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,SACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,YAGRrB,EAAAC,EAAAC,cAACe,EAAA,QAAD,KACIjB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,iBACfhB,EAAAC,EAAAC,cAACoB,EAAD,gBArBMnB,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oFCTNC,IAASC,OACP7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KAGA9B,EAAAC,EAAAC,cAAC6B,EAAD,OAEEC,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f647fbd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Landing extends Component {\n  render() {\n    return(\n      <div><h1> Landing Page</h1></div>\n    )\n  }\n}\n\nexport default Landing;\n","import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return(\n      <div> <h1> About Page</h1></div>\n    )\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return(\n      <div> <h1> Contact Page</h1>\n      <h1>Hello</h1></div>\n    )\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\n\nclass Donate extends Component {\n  render() {\n    return(\n      <div> <h1> Donate Page</h1></div>\n    )\n  }\n}\n\nexport default Donate;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport LandingPage from './landingpage';\nimport AboutMe from './aboutme';\nimport Contact from './contact';\nimport Donate from './donate';\n\nconst Main = () => (\n  <Switch>\n    <Route exact path=\"/\" component={LandingPage} />\n    <Route path=\"/aboutme\" component={AboutMe} />\n    <Route path=\"/contact\" component={Contact} />\n    <Route path=\"/donate\" component={Donate} />\n  </Switch>\n)\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n      <Layout>\n        <Header title=\"Education in a suitcase\" scroll>\n            <Navigation>\n                <Link to=\"/aboutme\">About</Link>\n                <Link to=\"/contact\">Contact</Link>\n                <Link to=\"/donate\">Donate</Link>\n            </Navigation>\n        </Header>\n        <Drawer title=\"SMLY\">\n            <Navigation>\n                <Link to=\"/aboutme\">About</Link>\n                <Link to=\"/contact\">Contact</Link>\n                <Link to=\"/donate\">Donate</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n\n\n  <App />\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}